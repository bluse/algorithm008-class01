/**
 * 297. 二叉树的序列化与反序列化
 * leetcode地址: https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/
 */
//代码实现(go)-dfs实现
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */

type Codec struct {
    strArr []string
}

func Constructor() Codec {
    return Codec{}
}

// Serializes a tree to a single string.
func (this *Codec) serialize(root *TreeNode) string {
    if root == nil {
        return "#"
    }

    return strconv.Itoa(root.Val) + "," + this.serialize(root.Left) + "," + this.serialize(root.Right)
}

// Deserializes your encoded data to tree.
func (this *Codec) deserialize(data string) *TreeNode {
    this.strArr = strings.Split(data, ",")
    return this.rec()
}

func (this *Codec) rec() *TreeNode {
    node := this.strArr[0]
    this.strArr = this.strArr[1:]
    if node == "#" {
        return nil
    }
    v, _ := strconv.Atoi(node)
    root := &TreeNode{
        Val: v,
        Left: this.rec(),
        Right: this.rec(),
    }

    return root
}

/**
 * Your Codec object will be instantiated and called as such:
 * obj := Constructor();
 * data := obj.serialize(root);
 * ans := obj.deserialize(data);
 */
