/**
 * 98. 验证二叉搜索树
 * leetcode地址: https://leetcode-cn.com/problems/validate-binary-search-tree/
 */
//代码实现(go)-递归实现
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isValidBST(root *TreeNode) bool {
    return rec(root, -1 << 63, 1 << 63 - 1)   
}

func rec(node *TreeNode, lower, upper int) bool {
    if node == nil {
        return true
    }
    if node.Val <= lower {
        return false
    }
    if node.Val >= upper {
        return false
    }
    if !rec(node.Left, lower, node.Val) {
        return false
    }
    if !rec(node.Right, node.Val, upper) {
        return false
    }

    return true
}
//栈实现
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isValidBST(root *TreeNode) bool {
    if root == nil {
        return true
    }
    lastVal, stack := -1 << 63, []*TreeNode{}
    node := root
    for node != nil || len(stack) > 0 {
        for node != nil {
            stack = append(stack, node)
            node = node.Left
        }
        node = stack[len(stack) - 1]
        stack = stack[:len(stack) - 1]
        if node.Val <= lastVal {
            return false
        }
        lastVal = node.Val
        node = node.Right
    }

    return true
}
