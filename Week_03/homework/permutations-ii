/**
 * 47. 全排列 II
 * leetcode地址: https://leetcode-cn.com/problems/permutations-ii/
 */
//代码实现(php)
class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer[][]
     */
    function permuteUnique($nums) {
        $res = [];
        sort($nums);
        $this->rec(count($nums), $nums, [], $res);

        return $res;
    }

    function rec($count, $old, $new, &$res) {
        if (count($new) == $count) {
            $res[] = $new;
        }
        for ($i = 0; $i < count($old); $i++) {
            $tmpNew = $new;
            $tmpNew[] = $old[$i];
            $tmpOld = [];
            for ($j = 0; $j < $i; $j++) {
                $tmpOld[] = $old[$j]; 
            }
            for ($k = $i + 1; $k < count($old); $k++) {
                $tmpOld[] = $old[$k];
            }
            $tmp = $old[$i];
            while ($i + 1 < count($old) && $old[$i + 1] == $tmp) {
                $i++;
            }
            $this->rec($count, $tmpOld, $tmpNew, $res);
        }
    }
}
//go实现
func permuteUnique(nums []int) [][]int {
    res := [][]int{}
    sort.Ints(nums)
    rec(len(nums), nums, []int{}, &res)

    return res
}

func rec(count int, old, new []int, res *[][]int) {
    if len(new) == count {
        *res = append(*res, append([]int{}, new...))
        return
    }
    for i := 0; i < len(old); i++ {
        tmpOri := []int{};
        for j := 0; j < i; j++ {
            tmpOri = append(tmpOri, old[j])
        }
        for j := i + 1; j < len(old); j++ {
            tmpOri = append(tmpOri, old[j])
        }
        rec(count, tmpOri, append(new, old[i]), res)
        for i + 1 < len(old) && old[i + 1] == old[i] {
            i++
        }
    }
}
