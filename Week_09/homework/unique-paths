/**
 * 62. 不同路径
 * leetcode地址: https://leetcode-cn.com/problems/unique-paths/
 */
//常规动态规划
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] paths = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || j == 0) {
                    paths[i][j] = 1;
                } else {
                    paths[i][j] = paths[i - 1][j] + paths[i][j - 1];
                }
            }
        }
        return paths[m - 1][n - 1];
    }
}
//节约内存法
class Solution {
    public int uniquePaths(int m, int n) {
        int[] paths = new int[n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || j == 0) {
                    paths[j] = 1;
                } else {
                    paths[j] += paths[j - 1];
                }
            }
        }
        return paths[n - 1];
    }
}
//节约内存法微调
class Solution {
    public int uniquePaths(int m, int n) {
        int[] paths = new int[n];
        Arrays.fill(paths, 1);
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                paths[j] += paths[j - 1];
            }
        }
        return paths[n - 1];
    }
}
