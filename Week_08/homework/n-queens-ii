/**
 * 52. N皇后 II
 * leetcode地址: https://leetcode-cn.com/problems/n-queens-ii/
 */
//常规解法
class Solution {
    public int res = 0;
    public int totalNQueens(int n) {
        char[][] board = new char[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(board[i], '.');
        }
        backTrace(board, 0);
        return res;
    }

    public void backTrace(char[][] board, int row) {
        if (row == board.length) {
            res++;
        } else {
            for (int col = 0; col < board.length; col++) {
                if (isValid(board, row, col)) {
                    board[row][col] = 'Q';
                    backTrace(board, row + 1);
                    board[row][col] = '.';
                }
            }
        }
    }

    public boolean isValid(char[][] board, int row, int col) {
        int left = col - 1, right = col + 1;
        for (int i = row - 1; i >= 0; i--) {
            if (board[i][col] == 'Q') return false;
            if (left >= 0 && board[i][left--] == 'Q') return false;
            if (right< board.length && board[i][right++] == 'Q') return false;
        }
        return true;
    }
}
//n皇后终极解法
class Solution {
    private int size;
    private int count;

    public int totalNQueens(int n) {
        size = (1 << n) - 1;
        count = 0;
        solve(0, 0, 0);
        return count;
    }

    public void solve(int row, int ld, int rd) {
        if (row == size) {
            count++;
            return;
        }
        int pos = size & (~(row | ld | rd));
        while (pos != 0) {
            int p = pos & (-pos);
            pos -= p;
            solve(row | p, (ld | p) << 1, (rd | p) >> 1);
        }
    }
}
