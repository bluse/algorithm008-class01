/**
 * 110. 平衡二叉树
 * leetcode地址: https://leetcode-cn.com/problems/balanced-binary-tree/
 */
//代码实现(go语言实现)
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isBalanced(root *TreeNode) bool {
    if root == nil {
        return true
    }
    if !isBalanced(root.Left) || !isBalanced(root.Right) {
        return false
    }
    leftHeight := height(root.Left)
    rightHeight := height(root.Right)
    if leftHeight > rightHeight {
        if leftHeight - rightHeight > 1 {
            return false
        }
    } else {
        if rightHeight - leftHeight > 1 {
            return false
        }
    }

    return true
}

func height(node *TreeNode) int {
    if node == nil {
        return 0
    }
    return 1 + max(height(node.Left), height(node.Right))
}

func max(a, b int) int {
    if a > b {
        return a
    }

    return b
}
//自底向上实现方法
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isBalanced(root *TreeNode) bool {
    return rec(root) != -1
}

func rec(node *TreeNode) int {
    if node == nil {
        return 0
    }
    left := rec(node.Left)
    if left == -1 {
        return -1
    }
    right := rec(node.Right)
    if right == -1 {
        return -1
    }
    if abs(left, right) < 2 {
        return max(left, right) + 1
    }

    return -1
}

func abs(a, b int) int {
    if a > b {
        return a - b
    }

    return b - a
}

func max(a, b int) int {
    if a > b {
        return a
    }

    return b
}
