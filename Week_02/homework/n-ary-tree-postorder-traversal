/**
 * 590. N叉树的后序遍历
 * leetcode地址: https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/
 */
//代码实现(go语言实现) - 递归实现 - 双百
/**
 * Definition for a Node.
 * type Node struct {
 *     Val int
 *     Children []*Node
 * }
 */

func postorder(root *Node) []int {
    res := []int{}
    rec(root, &res)
    return res
}

func rec(node *Node, res *[]int) {
    if node == nil {
        return
    }
    for i := 0; i < len(node.Children); i++ {
        rec(node.Children[i], res)
    }
    *res = append(*res, node.Val)
}
//栈实现
/**
 * Definition for a Node.
 * type Node struct {
 *     Val int
 *     Children []*Node
 * }
 */

func postorder(root *Node) []int {
    if root == nil {
        return []int{}
    }
    res, stack := []int{}, []*Node{}
    stack = append(stack, root)
    for len(stack) > 0 {
        cur := stack[len(stack) - 1]
        stack = stack[:len(stack) - 1]
        res = append(res, cur.Val)
        for i := 0; i < len(cur.Children); i++ {
            stack = append(stack, cur.Children[i])
        }
    }

    return reverse(res)
}

func reverse(res []int) []int {
    resLen := len(res)
    n := resLen / 2
    for i := 0; i < n; i++ {
        res[i], res[resLen - i - 1] = res[resLen - i - 1], res[i]
    }

    return res
}
