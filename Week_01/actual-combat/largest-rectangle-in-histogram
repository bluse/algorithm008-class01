/**
 * 柱状图中最大的矩形 leetcode no.84
 * 暴力解法:
 * 遍历所有矩形，分别找到左届(左侧第一个小于当前元素的元素下标)、右届(右侧第一个小于当前元素的元素下标)，
 * 然后右届与左届之间的距离乘以当前元素即为当前元素所有勾勒出的矩形的最大面积，
 * 保留最大的矩形面积，即为结果
 */

//代码实现(go语言实现)
func largestRectangleArea(heights []int) int {
    maxArea := 0
    for i := 0; i < len(heights); i++ {
        left := i - 1
        for left >= 0 && heights[left] >= heights[i] {
            left--
        }
        right := i + 1
        for right < len(heights) && heights[right] >= heights[i] {
            right++
        }
        area := (right - left - 1) * heights[i]
        maxArea = max(maxArea, area)
    }

    return maxArea
}

func max(a, b int) int {
    if a > b {
        return a
    }

    return b
}

/**
 * 方法二: 使用栈
 */
//代码实现(go语言实现)
func largestRectangleArea(heights []int) int {
    if len(heights) == 0 {
        return 0
    }
    res, stack := 0, []int{}
    stack = append(stack, -1)
    stack = append(stack, 0)
    lHeights := len(heights)
    for i := 1; i < lHeights; i++ {
        if heights[i] >= heights[stack[len(stack) - 1]] {
            stack = append(stack, i)
        } else {
            for len(stack) > 1 && heights[i] < heights[stack[len(stack) - 1]] {
                lstack := len(stack)
                res = max(res, (i - stack[lstack - 2] - 1) * heights[stack[lstack - 1]])
                stack = stack[:lstack - 1]
            }
            stack = append(stack, i)
        }
    }
    for len(stack) > 1 {
        if stack[len(stack) - 2] == -1 {
            res = max(res, heights[stack[len(stack) - 1]] * lHeights)
        } else {
            res = max(res, heights[stack[len(stack) - 1]] * (lHeights - stack[len(stack) - 2] - 1))
        }
        stack = stack[:len(stack) - 1]
    }

    return res
}

func max(a, b int) int {
    if a > b {
        return a
    }

    return b
}
