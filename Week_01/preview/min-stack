type MinStack struct {
    stack [][]int
}

/** initialize your data structure here. */
func Constructor() MinStack {
    return MinStack{
        
    }
}


func (this *MinStack) Push(x int)  {
    if len(this.stack) == 0 {
        this.stack = append(this.stack, []int{x, x})
    } else {
        min := x
        if this.stack[len(this.stack) - 1][1] < min {
            min = this.stack[len(this.stack) - 1][1]
        }
        this.stack = append(this.stack, []int{x, min})
    }
}


func (this *MinStack) Pop()  {
    if len(this.stack) == 0 {
        return
    }
    this.stack = this.stack[:len(this.stack) - 1]
}


func (this *MinStack) Top() int {
    if len(this.stack) == 0 {
        return 0
    }
    return this.stack[len(this.stack) - 1][0]
}


func (this *MinStack) GetMin() int {
    return this.stack[len(this.stack) - 1][1]
}


/**
 * Your MinStack object will be instantiated and called as such:
 * obj := Constructor();
 * obj.Push(x);
 * obj.Pop();
 * param_3 := obj.Top();
 * param_4 := obj.GetMin();
 */


/**
 * leetcode no.155
 * 最小栈
 * 重点: 在常数时间内检测到栈的最小元素
 * 实现方案: 以空间换时间，记录每个元素的同时，记录到当前元素为止最小元素的值，这样，要检索最小元素，只要拿栈顶元素就好了，时间复杂度O(1)
 */
