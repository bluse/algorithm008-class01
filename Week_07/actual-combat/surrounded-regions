/**
 * 130. 被围绕的区域
 * leetcode地址: https://leetcode-cn.com/problems/surrounded-regions/
 */
//dfs实现
class Solution {
    public void solve(char[][] board) {
        if (board.length == 0 || board[0].length == 0) return;
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O' && (i == 0 || j == 0 || i == m - 1 || j == n - 1)) {
                    dfs(board, m, n, i, j);
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') board[i][j] = 'X';
                if (board[i][j] == '#') board[i][j] = 'O';
            }
        }
    }

    public void dfs(char[][] board, int m, int n, int row, int col) {
        if (row >= 0 && row < m && col >= 0 && col < n && board[row][col] == 'O') {
            board[row][col] = '#';
            dfs(board, m, n, row - 1, col);
            dfs(board, m, n, row, col - 1);
            dfs(board, m, n, row + 1, col);
            dfs(board, m, n, row, col + 1);
        }
    }
}
