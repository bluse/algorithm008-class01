/**
 * 130. 被围绕的区域
 * leetcode地址: https://leetcode-cn.com/problems/surrounded-regions/
 */
//dfs实现
class Solution {
    public void solve(char[][] board) {
        if (board.length == 0 || board[0].length == 0) return;
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O' && (i == 0 || j == 0 || i == m - 1 || j == n - 1)) {
                    dfs(board, m, n, i, j);
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') board[i][j] = 'X';
                if (board[i][j] == '#') board[i][j] = 'O';
            }
        }
    }

    public void dfs(char[][] board, int m, int n, int row, int col) {
        if (row >= 0 && row < m && col >= 0 && col < n && board[row][col] == 'O') {
            board[row][col] = '#';
            dfs(board, m, n, row - 1, col);
            dfs(board, m, n, row, col - 1);
            dfs(board, m, n, row + 1, col);
            dfs(board, m, n, row, col + 1);
        }
    }
}
//并查集实现
class Solution {
    public void solve(char[][] board) {
        if (board.length == 0 || board[0].length == 0) return;
        int m = board.length, n = board[0].length, count = m * n;
        int[] parent = new int[count + 1];
        for (int i = 0; i < parent.length; i++) parent[i] = i;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'X') continue;
                if (i == 0 || i == m - 1 || j == 0 || j == n - 1) {
                    union(node(i, j, n), count, parent);
                } else {
                    // 向上查
                    if (i - 1 >= 0 && board[i - 1][j] == 'O') {
                        union(node(i, j, n), node(i - 1, j, n), parent);
                    }
                    // 向左查
                    if (j - 1 >= 0 && board[i][j - 1] == 'O') {
                        union(node(i, j, n), node(i , j - 1, n), parent);
                    }
                    // 向下查
                    if (i + 1 < m && board[i + 1][j] == 'O') {
                        union(node(i, j, n), node(i + 1, j, n), parent);
                    }
                    // 向右查
                    if (j + 1 < n && board[i][j + 1] == 'O') {
                        union(node(i, j, n), node(i, j + 1, n), parent);
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') {
                    if (!isConnected(node(i, j, n), count, parent)) board[i][j] = 'X';
                }
            }
        }
    }

    public int node(int i, int j, int cols) {
        return i * cols + j;
    }

    public int find(int p, int[] parent) {
        while (p != parent[p]) {
            parent[p] = parent[parent[p]];
            p = parent[p];
        }
        return p;
    }

    public void union(int p, int q, int[] parent) {
        p = find(p, parent);
        q = find(q, parent);
        if (p != q) parent[q] = p;
    }

    public boolean isConnected(int p, int q, int[] parent) {
        return find(p, parent) == find(q, parent);
    }
}
