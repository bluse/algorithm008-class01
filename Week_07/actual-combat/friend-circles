/**
 * 547. 朋友圈
 * leetcode地址: https://leetcode-cn.com/problems/friend-circles/
 */
//dfs思路
class Solution {
    public int findCircleNum(int[][] M) {
        int res = 0;
        int[] visited = new int[M.length];
        for (int i = 0; i < M.length; i++) {
            if (visited[i] == 0) {
                res++;
                dfs(M, i, visited);
            }
        }
        return res;
    }

    public void dfs(int[][] M, int i, int[] visited) {
        for (int j = 0; j < M.length; j++) {
            if (M[i][j] == 1 && visited[j] == 0) {
                visited[j] = 1;
                dfs(M, j, visited);
            }
        }
    }
}
//并查集思路
class Solution {
    public int findCircleNum(int[][] M) {
        int res = 0;
        int[] parent = new int[M.length];
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < M.length; i++) {
            for (int j = 0; j < M.length; j++) {
                if (M[i][j] == 1) {
                    union(i, j, parent);
                }
            }
        }
        for (int k = 0; k < parent.length; k++) {
            if (parent[k] == k) res++;
        }
        return res;
    }

    public int find(int p, int[] parent) {
        while (p != parent[p]) {
            parent[p] = parent[parent[p]];
            p = parent[p];
        }
        return parent[p];
    }

    public void union(int p, int q, int[] parent) {
        int rootP = find(p, parent);
        if (p != rootP) parent[p] = rootP;
        int rootQ = find(q, parent);
        if (q != rootQ) parent[q] = rootQ;
        if (rootP == rootQ) return;
        parent[rootP] = rootQ;
        if (p != rootQ) parent[p] = rootQ;
    }
}
