/**
 * 208. 实现 Trie (前缀树)
 * leetcode地址: https://leetcode-cn.com/problems/implement-trie-prefix-tree/
 */
//trie树实现(java)
class Trie {
    private boolean isEnd;
    private Trie[] next;
    /** Initialize your data structure here. */
    public Trie() {
        isEnd = false;
        next = new Trie[26];
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        if (word == null || word.length() == 0) return;
        Trie curr = this;
        for (char sub : word.toCharArray()) {
            int n = sub - 'a';
            if (curr.next[n] == null) curr.next[n] = new Trie();
            curr = curr.next[n];
        }
        curr.isEnd = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Trie curr = searchPrefix(word);
        if (curr == null || curr.isEnd == false) return false;
        return true;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Trie curr = searchPrefix(prefix);
        if (curr == null) return false;
        return true;
    }

    public Trie searchPrefix(String word) {
        Trie curr = this;
        for (char sub : word.toCharArray()) {
            int n = sub - 'a';
            if (curr.next[n] == null) return null;
            curr = curr.next[n];
        }
        return curr;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
