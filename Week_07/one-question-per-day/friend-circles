/**
 * 547. 朋友圈
 * leetcode地址: https://leetcode-cn.com/problems/friend-circles/
 */
//深度优先搜索
class Solution {
    public int findCircleNum(int[][] M) {
        int ans = 0;
        int[] visited = new int[M.length];
        for (int i = 0; i < M.length; i++) {
            if (visited[i] == 0) {
                dfs(M, visited, i);
                ans++;
            }
        }
        return ans;
    }

    public void dfs(int[][] M, int[] visited, int i) {
        for (int j = 0; j < M[i].length; j++) {
            if (M[i][j] == 1 && visited[j] == 0) {
                visited[j] = 1;
                dfs(M, visited, j);
            }
        }
    }
}
//广度优先搜索
class Solution {
    public int findCircleNum(int[][] M) {
        int ans = 0;
        Queue<Integer> queue = new LinkedList<>();
        int[] visited = new int[M.length];
        for (int i = 0; i < M.length; i++) {
            if (visited[i] == 0) {
                queue.add(i);
                while (!queue.isEmpty()) {
                    int s = queue.remove();
                    for (int j = 0; j < M[s].length; j++) {
                        if (M[s][j] == 1 && visited[j] == 0) {
                            visited[j] = 1;
                            queue.add(j);
                        }
                    }
                }
                ans++;
            }
        }
        return ans;
    }
}
