/**
 * 33. 搜索旋转排序数组
 * leetcode地址: https://leetcode-cn.com/problems/search-in-rotated-sorted-array/
 */
//代码实现(go)
func search(nums []int, target int) int {
    ret, left, right, pivot, count  := -1, 0, len(nums), 0, 0
    for left < right {
        pivot = left + (right - left) / 2
        if nums[pivot] == target {
            ret = pivot
            break
        }
        count = 0
        if nums[0] > target {
            count++
        }
        if nums[0] > nums[pivot] {
            count++
        }
        if target > nums[pivot] {
            count++
        }
        if count == 3 || count == 1 {
            left = pivot + 1
        } else {
            right = pivot
        }
    }

    return ret
}
//代码实现(java)
class Solution {
    public int search(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        while (left < right) {
            int pivot = (right + left) / 2;
            if ((nums[0] > target) ^ (nums[0] > nums[pivot]) ^ (target > nums[pivot])) {
                left = pivot + 1;
            } else {
                right = pivot;
            }
        }

        return left == right && nums[left] == target ? left : -1;
    }
}
